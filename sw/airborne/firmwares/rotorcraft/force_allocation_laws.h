/*
 * Copyright (C) 2011-2012 Team ATMOS
 *
 * This file is part of paparazzi.
 *
 * paparazzi is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * paparazzi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with paparazzi; see the file COPYING.  If not, write to
 * the Free Software Foundation, 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

/** @file force_allocation.h
 *  Distribute Outerloop Acceleration Commands To Lifting Surfaces.
 *  Also see the @ref force_allocation "Force Allocation Laws" page.
 *
 */

/**
 * @defgroup force_allocation Force Allocation Laws
 * @{
 */
#ifndef FORCE_ALLOCATION_H
#define FORCE_ALLOCATION_H
#include "std.h"
#include "generated/airframe.h"

extern uint8_t transition_percentage,transition_percentage_nav;

extern float force_allocation_fixedwing_max_climb; // m/s
extern float force_allocation_fixedwing_pitch_of_vz; // VZ = vertical speed
extern float force_allocation_fixedwing_throttle_of_vz;
extern float force_allocation_fixedwing_pitch_trim;
extern float force_allocation_fixedwing_throttle_of_xdd; // forward acceleration
extern float force_allocation_fixedwing_yawrate_of_ydd;  // lateral acceleration

enum lift_type_enum {ROTOR_LIFTING_DEVICE = 0, WING_LIFTING_DEVICE = 1};

/** @struct PprzLiftDevice
 *  This struct describes a lift device, such as rotors and wings.
 */
struct PprzLiftDevice {
  enum lift_type_enum lift_type; /**< Rotor (thruster lift device) or Wing (aerodynamic lift device) */
  int activation;   /**< Activation percentage between 0 and 100. Set by LiftDeviceComputeActivation in force_allocation_laws_run().*/
  // FIXME: change to radians and use DegToRad()
  float orientation_pitch;  /**< Angle between the lift device lift vector and the neutral plane (in radians). */

  int32_t commands[COMMANDS_NB]; /**< Output commands. Generated by force_allocation_laws_run().*/

  int8_t offset; /**< Offset in the activation scale. Between 0 and 100. */
  float sensitivity; /**< Sensitivity in the activation scale. Float, FIXME has to be changed to BFP. */

};

extern void force_allocation_laws_run(void);

#define NavSetTransitionPercentage(x) ({ transition_percentage_nav = x; })

#endif
/**
 * @}
 */
